{
	"LoadLibrary": {
		"prefix": "loadlibrary",
		"description": "LoadLibrary",
		"body": ["local ${1|ActionManager,BaseAction,Analytics,CameraPlus,CameraShaker,CameraStackService,CameraState,CameraUtils,CameraControls,CameraGamepadInputUtils,GamepadRotateModel,CustomCameraEffect,DefaultCamera,FadeBetweenCamera,FadingCamera,HeartbeatCamera,ImpulseCamera,InverseFader,LagPointCamera,PointCamera,PushCamera,RotatedCamera,SmoothPositionCamera,SmoothRotatedCamera,SmoothZoomedCamera,SummedCamera,TrackCamera,XZPlaneLockCamera,ZoomedCamera,CameraStateTweener,FieldOfViewUtils,OnRenderStepFrame,ClientHandler,BasicPane,Counter,EventConnection,Fireworks,Leaderboard,PerfectTextLabel,Pill,Scale,SlicedImage,SwShButton,TouchRipple,GameButton,Keys,ParticleEngine,RagdollClient,RagdollHumanoidOnDeathClient,RagdollHumanoidOnFallClient,RagdollableClient,RagdollBindersClient,HapticFeedbackUtils,PromiseRemoteEventMixin,Analytics,CatmullRomSpline,BitBuffer,DataStore2,DataStoreService,ProfileService,ParticleEngine,PlayerDataHandler,Ragdoll,RagdollHumanoidOnDeath,RagdollHumanoidOnFall,Ragdollable,RagdollBindersServer,ServerHandler,NetworkOwnerService,Binder,BinderProvider,CFrameUtility,CharacterUtils,HumanoidAnimatorUtils,EnabledMixin,IsAMixin,BaseObject,Enumeration,PartCache,PseudoInstance,ReplicatedPseudoInstance,Constants,SortedArray,CircularBuffer,LinkedList,None,MinPriorityQueue,PriorityQueue,TyperPriorityQueue,Queue,Stack,Symbol,Table,WeakInstanceTable,Debug,Repr,TypeOf,Typer,TyperPlus,t,Enumerations,FastSignal,Janitor,Signal,GamePasses,AsymmetricTransformation,CheckDialog,Checkbox,ChoiceDialog,ChoiceDialogNoDismiss,Color,ConfirmationDialog,Toast,HmsPriorityUI,IconButton,IconLabel,MaterialSpritesheet,Menu,PillBackingBuilder,Radio,RadioGroup,RippleButton,Rippler,SelectionController,Shadow,Snackbar,Bezier,EasingFunctions,Lerps,ReplicatedTweening,Tween,TweenService,BigNum,Math,Quaternion,QuaternionObject,AccelTween,ProjectilePhysics,Spring,CatchFactory,GroupPromise,HttpPromise,MarketplacePromise,PendingPromiseTracker,PlayerPromise,PromiseChild,PromiseGetRemoteEvent,PromiseGetRemoteFunction,BindableRagdollHumanoidOnFall,RagdollHumanoidOnFallConstants,BuildRagdoll,RagdollHandler,RagdollRigging,RagdollUtils,RagdollableConstants,FastCast,RaycastHitbox,SphereRaycast,RegionModule,RotatedRegion3,AnimatedSpritesheetPlayer,SpritesheetHandler,Base64,LuaRegex,OldLuaRegex,String,Date,DateTimePlus,Scheduler,SyncedPoller,MasterClock,SlaveClock,TimeSyncService,TimeSyncUtils,ValueObject,Fabric,Flipper,FlipperBinding,Fmt,Llama,Postie,Promise,Replica,Roact,RoactFlipper,RoactRodux,Rodux,tpcall|} = Resources:LoadLibrary(\"$1\")$0"],
	},

	"AssignSignature": {
		"prefix": "assignsignature",
		"description": "AssignSignature",
		"body": ["Typer.AssignSignature(Typer.Any, Typer.Function, function(Value, Function)\nend)"],
	},

	"PromiseAssignSignature": {
		"prefix": "promiseassignsignature",
		"description": "PromiseAssignSignature",
		"body": ["Typer.PromiseAssignSignature(Typer.Any, Typer.Function, function(Value, Function)\nend)"],
	},

	"Benchmark": {
		"prefix": "bench",
		"description": "Benchmark code",
		"body": ["local Functions = {}\n\nFunctions[\"${1:FunctionOne}\"] = function()\nend\n\nFunctions[\"${2:FunctionTwo}\"] = function()\nend\n\nrequire(4185109675).new(1, \"${3:BenchmarkName}\", Functions)"],
	},

	"Janitor Class": {
		"prefix": ["janitorclass"],
		"description": "Creates a new class that implements Janitor.",
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Resources = require(ReplicatedStorage.Resources)",
			"local Janitor = Resources:LoadLibrary(\"Janitor\")",
			"local Table = Resources:LoadLibrary(\"Table\")",
			"",
			"local ${1:ClassName} = {ClassName = \"$1\"}",
			"$1.__index = $1",
			"",
			"function $1.new()",
			"\tlocal self = setmetatable({",
			"\t\tJanitor = Janitor.new();",
			"\t}, $1)",
			"",
			"\treturn self",
			"end",
			"",
			"function $1:Destroy()",
			"\tself.Janitor:Destroy()",
			"\ttable.clear(self)",
			"\tsetmetatable(self, nil)",
			"end",
			"",
			"return Table.Lock($1, nil, script.Name)",
		],
	},

	"Module": {
		"prefix": "module",
		"description": "Creates a module.",
		"body": [
			"local Resources = require(ReplicatedStorage.Resources)",
			"local Table = Resources:LoadLibrary(\"Table\")",
			"",
			"local NewModule = {}",
			"",
			"return Table.Lock(NewModule, nil, script.Name)",
		],
	},

	"random": {
		"prefix": "random",
		"description": "Random shorthand",
		"body": ["local RandomLib = Random.new(tick() % 1 * 1E7)"],
	},

	"boilerplate": {
		"prefix": "boilerplate",
		"description": "Quickly setup my boilerplate.",
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Resources = require(ReplicatedStorage.Resources)",
		],
	},

	"IfTypeCheck": {
		"prefix": ["tifcheck", "tiftypecheck"],
		"description": "Creates a new if-then type check for t.",
		"body": [
			"local TypeSuccess, TypeError = ${1:TypeCheck}(${2:...})",
			"if not TypeSuccess then",
			"\terror(TypeError, 2)",
			"end",
		],
	},
}